pipeline {
    agent any
    
    environment {
        TARGET_BRANCH = "develop/be"
        REMOTE_USER = "ubuntu"
        REMOTE_HOST = "k11b304.p.ssafy.io"
        REMOTE_DIR = "/home/ubuntu/newbie"
        DOCKER_IMAGE = "backend-chat"
    }
    
    stages {
        stage("Clean Up Workspace") {
            steps {
                deleteDir()
            }
            post {
                success {
                    echo "Clean up workspace success!"
                }
                failure {
                    echo "Clean up workspace failure!"
                }
            }
        }
        stage("Checkout Git Branch") {
            steps {
                script {
                    checkout([
                        $class: "GitSCM",
                        branches: [[name: "*/${TARGET_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: "CleanCheckout"]],
                        userRemoteConfigs: [[
                            url: "https://lab.ssafy.com/s11-final/S11P31B304.git",
                            credentialsId: "gitlab-token"
                        ]]
                    ])
                }
            }
            post {
                success {
                    echo "Checkout git branch success!"
                }
                failure {
                    echo "Checkout git branch failure!"
                }
            }
        }
        stage("Build with Gradle") {
            steps {
                dir("backend/chat") {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build --no-daemon -Pprod=true"
                }
            }
            post {
                success {
                    echo "Build with gradle success!"
                }
                failure {
                    echo "Build with gradle failure!"
                }
            }
        }
        stage("Build Docker Image") {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:latest -f backend/chat/Dockerfile backend/chat/."
                }
            }
            post {
                success {
                    echo "Build docker image success!"
                }
                failure {
                    echo "Build docker image failure!"
                }
            }
        }
        stage("Deploy Backend CHAT") {
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i /var/jenkins_home/.ssh/jenkins_rsa ${REMOTE_USER}@${REMOTE_HOST} "
                    cd ${REMOTE_DIR} &&

                    if docker-compose ps -q ${DOCKER_IMAGE}; then
                        docker-compose stop ${DOCKER_IMAGE} &&
                        docker-compose rm -f ${DOCKER_IMAGE}
                    fi &&
                    
                    docker-compose up -d ${DOCKER_IMAGE}
                    "
                    """
                }
            }
            post {
                success {
                    echo "Deploy Backend CHAT success!"
                }
                failure {
                    echo "Deploy Backend CHAT failure!"
                }
            }
        }
    }

    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                def color = currentBuild.result == 'SUCCESS' ? 'good' : 'danger'
                def message = "${env.JOB_NAME} #${env.BUILD_NUMBER} ${currentBuild.result == 'SUCCESS' ? 'Î∞∞Ìè¨ ÏÑ±Í≥µ ü•≥' : 'Î∞∞Ìè¨ Ïã§Ìå® üò±'}\nby ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)"
                
                mattermostSend(color: color,
                    message: message,
                    endpoint: 'https://meeting.ssafy.com/hooks/4g1pubwjxbdq5ku3czbpadxw6h',
                    channel: 'b304-jenkins'
                )
            }
        }
    }
}